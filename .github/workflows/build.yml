# Name des automatisierten Prozesses
name: Build Android APK (Final Corrected Version)

# Wann soll dieser Prozess gestartet werden?
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

# Definiert die Aufgaben ("Jobs"), die ausgeführt werden sollen
jobs:
  build-android:
    # Verwendet die neueste Version von Ubuntu als Basis
    runs-on: ubuntu-latest

    steps:
      # Schritt 1: Kopiert Ihren Code in die Umgebung
      - name: Checkout
        uses: actions/checkout@v4

      # HINWEIS: Der fehlerhafte Umbenennungs-Schritt wurde hier entfernt.
      # Wir gehen davon aus, dass die Hauptdatei bereits 'main.py' heißt.

      # Schritt 2: Verwendet die offizielle Kivy-Buildozer-Action
      - name: Build with Buildozer
        uses: kivy/buildozer-action@v1
        id: buildozer
        with:
          # Wir führen hier den exakt gleichen Befehl aus, aber in einer perfekten Umgebung
          command: buildozer -v android debug
          # Wir müssen auch die buildozer.spec Datei angeben, da sie nicht im Root ist, falls umstrukturiert
          spec_file: buildozer.spec

      # Schritt 3: Lädt die fertige APK-Datei hoch
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: voicecloningapp-apk
          # Dieser Pfad verweist auf die Ausgabe der vorherigen Action
          path: ${{ steps.buildozer.outputs.package_path }}
